\babel@toc {UKenglish}{}
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {5.1}{\ignorespaces The figure shows an example of a trajectory generated by the NUTS sampler. The balanced binary tree structure is drawn in on the trajectory as well as illustrated at the bottom. The numbering displays the order in which the states are generated by Leapfrog integration. The black node is the initial node. The first doubling is forwards in time and yields the rightmost node of the first binary tree. The second doubling is backwards in time and is initiated from the black node, yielding a new tree of height 2 where the left subtree is the new states (the yellow nodes). The next doubling is also backwards in time, and the Leapfrog integrator is initiated from the tail (the leftmost yellow node) for four Leapfrog steps generating a subtree which becomes the left half of the next tree (blue nodes). The final doubling in the figure is forwards in time with $L = 8$ Leapfrog steps are taken from the orange node (which was the leftmost leaf of the tree befoure the final doubling) which yields the green nodes. The figure is a modified drawing of the one used in \cite {nuts}.\relax }}{24}{figure.caption.14}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {7.1}{\ignorespaces The figure shows the relative measured execution time used per sample using $L = 512$ Leapfrog steps, as a function of number of parameters. The CPU measurements are done using an 8-core M1 CPU (Apple Silicon). The GPU measurements are made with an NVIDIA Tesla P100 GPU. \relax }}{38}{figure.caption.18}%
\contentsline {figure}{\numberline {7.2}{\ignorespaces The figure shows the average prediction time to compute a prediction given a single input $x$ using the models in table \ref {tab:deep_models}. The average time used is measured in ms and is averaged over 1000 randomly sampled points. The measured time includes computation of the sample mean and sample error. \relax }}{39}{figure.caption.19}%
\contentsline {figure}{\numberline {7.3}{\ignorespaces The figure shows the average prediction time using the built-in GPU on an M1 Apple Silicon system-on-chip to compute a prediction given a single input $x$ using the models in table \ref {tab:deep_models}. The average time used is measured in ms and is averaged over 1000 randomly sampled points. The measured time includes computation of the sample mean and sample error. \relax }}{40}{figure.caption.20}%
\contentsline {figure}{\numberline {7.4}{\ignorespaces The figure shows the histograms of measured loading times in seconds using the models in table \ref {tab:deep_models}. The measurements were performed using {\tt time.perf\_counter} from Python using an M1 Apple Silicon system-on-chip. The time measurements consist of 1000 measurements for each model. \relax }}{41}{figure.caption.21}%
\contentsline {figure}{\numberline {7.5}{\ignorespaces The figure shows the projection of the empirical distribution onto the planes spanned by $(W_{2,4}^1, W_{2,5}^1)$ on the left and onto the plane spanned by $(W_{3,7}^1, W_{3, 6}^1)$ on the right, using the samples from model 3 in table \ref {tab:deep_models}. The distributions are approximated using kernel density estimation. \relax }}{43}{figure.caption.22}%
\contentsline {figure}{\numberline {7.6}{\ignorespaces The figure at the top shows the measured time in seconds per sample using HMC as a function of Leapfrog steps $L$ using a model with 561 parameters. The figure at the bottom shows the time in seconds per sample with the same sampler with a fixed number of Leapfrog steps $L = 512$ as a function of number of parameters in the BNN model. \relax }}{44}{figure.caption.23}%
\contentsline {figure}{\numberline {7.7}{\ignorespaces The figure shows the standardized residuals computed on the testset. The model architechture used is a model with layers 5-20-20-1 with $\tanh (x)$ as the hidden activation function. In the top figure, we have used the HMC sampler with a fixed number of Leapfrog steps $L = 512$. In the bottom figure, we have used the NUTS sampler with a maximum tree depth of $12$ corresponding to a maximum of $L = 2^{12} = 4096$ Leapfrog steps. The remaining important hyperparameters were 2500 pretraining epochs with a batch size of 32 using the ADAM optimizer. In total a 1000 neural networks were sampled in each case with a thinning-amount of 10 steps between each sample. \relax }}{45}{figure.caption.24}%
\contentsline {figure}{\numberline {7.8}{\ignorespaces The figure shows the average number of Leapfrog steps $L$ as a function of number of warm-up steps used by the NUTS sampler when sampling the models shown in the bottom of figure \ref {fig:standardized_residuals_vs_burn_in_steps}. We have included a few more measurements to showcase how fluctuating the average number can be. \relax }}{46}{figure.caption.25}%
\contentsline {figure}{\numberline {7.9}{\ignorespaces The figure shows the standardized residuals of a model with the architecture 5-20-20-1 with $\tanh (x)$ as the hidden activation function. In this case the varying number of the number of epochs run with pretraining starting from 32 all the way up to 8192. The batch size used was 32, the number of warm-up steps was 1000 (200 of which were burn-in steps and 800 were adaptation steps). We fixed the Leapfrog steps to $L = 512$ using the HMC sampler. The ADAM optimizer was used for the pretraining phase. As usual we sampled 1000 neural networks with 10 steps between each sample. \relax }}{47}{figure.caption.26}%
\contentsline {figure}{\numberline {7.10}{\ignorespaces The figure shows the distribution of the standardized residuals computed on the test data using the models listed in table \ref {tab:deep_models}. The Normal distribution is drawn in with a dotted black line for benchmarking reference. The figure is meant to illustrate the performance of the models with respect to the number of parameters in the models. The models were trained with 2500 warm-up steps (20\% burn-in and 80\% adaptation), gathering 1000 neural networks with 10 steps between each sample. We used 1000 pretraining epochs with a batch size of 32. The kernel used was the NUTS kernel with a maximum of $L = 4096$ Leapfrog steps. \relax }}{48}{figure.caption.27}%
\contentsline {figure}{\numberline {7.11}{\ignorespaces The figure shows the predictive distribution estimated by use of model 3 in table \ref {tab:deep_models} for to randomly chosen points from the test set. The red line shows the true target and the black line shows the predicted sample mean obtained from the distribution. The figure on top demonstrates a case where the sample mean is approximately the same as the target, while the figure at the bottom demonstrates a case where the true target lies entirely outside the predictive distrbution. \relax }}{49}{figure.caption.28}%
\addvspace {10\p@ }
