\babel@toc {UKenglish}{}
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {5.1}{\ignorespaces The figure shows an example of a trajectory generated by the NUTS sampler. The top diagram displays the projection onto position space with the momenta drawn in as arrows. The bottom diagram shows the resulting balanced binary tree. The tree structure is drawn onto the trajectory as well. The numbering displays the order in which the states are generated by Leapfrog integration. The black node is the initial node. The first doubling is forwards in time and yields the rightmost node of the first binary tree. The second doubling is backwards in time and is initiated from the black node, yielding a new tree of height 2 where the left subtree is the new states (the yellow nodes). The next doubling is also backwards in time, and the Leapfrog integrator is initiated from the tail (the leftmost yellow node) performing four Leapfrog steps generating a subtree which becomes the left half of the next tree (blue nodes). The final doubling in the figure is forwards in time with $L = 8$ Leapfrog steps taken from the orange node (which was the rightmost leaf of the tree before the final doubling) which yields the green nodes. The figure is a modified version of a diagram in \cite {nuts}.\relax }}{26}{figure.caption.15}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {7.1}{\ignorespaces The values of the cross sections $\sigma _{\tilde {\chi }_1^0 \tilde {\chi }_1^0}$ are shown projected onto the axis of masses $m_{\tilde {\chi }_1^0}$. The data is taken from the training data. \relax }}{42}{figure.caption.20}%
\contentsline {figure}{\numberline {7.2}{\ignorespaces The values of the cross sections $\sigma _{\tilde {\chi }_1^0 \tilde {\chi }_1^0}$ are shown projected onto the axes of mixing angles $N_{1j}$ for $j = 1, 2, 3, 4$. The data is taken from the training data. \relax }}{43}{figure.caption.21}%
\addvspace {10\p@ }
\contentsline {figure}{\numberline {8.1}{\ignorespaces The figure on top shows the relative wall clock time used per generated sample using $L = 512$ Leapfrog steps with the HMC sampler, as a function of number of hidden nodes in the hidden layer with an architechture 5-$n$-1, where $n$ represents the number of nodes. The relative wall clock time is computed as the wall clock time used by the CPU divided by the wall clock time used by the GPU. The figure on the bottom shows the absolute wall clock time per generated sample measured on the GPU for the same case. The red dots indicate the actual measured points. The CPU measurements are done using an 8-core M1 CPU (Apple Silicon). The GPU measurements are made on an NVIDIA Tesla P100 GPU. \relax }}{50}{figure.caption.23}%
\contentsline {figure}{\numberline {8.2}{\ignorespaces The figure shows the average prediction time given up to several simultaneous inputs $x$ using the models in table \ref {tab:deep_models}. The wall clock time of the executions shown are measured in milliseconds and are averaged over 1000 trials per case. The measured wall clock time includes computation of the sample mean and sample error of the predictive distributions produced by the BNN models. The dots indicate the actual measured values. The colored graphs indicate how many simultaneous input points that were used. The measurements were done using an 8-core M1 CPU (Apple Silicon). \relax }}{51}{figure.caption.24}%
\contentsline {figure}{\numberline {8.3}{\ignorespaces The figure shows the average prediction time using the built-in GPU on an M1 Apple Silicon system-on-chip to compute a prediction given up to several simultaneous inputs $x$ using the models in table \ref {tab:deep_models}. The measured wall clock time is given in milliseconds and is averaged over 1000 trials. The measured time includes computation of the sample mean and sample error of the predictive distributions produced by the BNN models. The dots indicate the actual measured values. The colored graphs indicate the number of simultaneous input points used. \relax }}{52}{figure.caption.25}%
\contentsline {figure}{\numberline {8.4}{\ignorespaces The figure shows the histograms of measured loading times (wall clock) in seconds using the models in table \ref {tab:deep_models}. The measurements were made on an M1 Apple Silicon system-on-chip. The time measurements consist of 1000 measurements for each model. \relax }}{53}{figure.caption.26}%
\contentsline {figure}{\numberline {8.5}{\ignorespaces The figure shows the projection of the kernel density estimation of the empirical distribution onto two-dimensional subplanes of the posterior distribution. The figure on the top left shows the plane spanned by $(W_{2,5}^1, W_{2,6}^1)$. The figure on the top right shows the distribution in the plane spanned by $(W_{11,4}^3, W_{8,1}^1)$. The figure on the bottom left shows the distribution in the plane spanned by $(b_6^2, b_1^4)$. The figure on the bottom right shows the distribution spanned by the plane $(b_{11}^3, b_1^6)$. The weights used are the ones pertaining to ``model 4'' in table \ref {tab:deep_models}. \relax }}{54}{figure.caption.27}%
\contentsline {figure}{\numberline {8.6}{\ignorespaces The figure shows the computed $R^2$-scores in both log space and target space as a function number of warm-up steps (20\% burn-in and 80\% adaptation) achieved with HMC and NUTS. The architecture of the BNN model used is 5-20-20-1 with $\tanh (x)$ used as the activation function in the hidden layers. We performed 2500 pretraning steps with a batch size of 32 using the ADAM optimizer. In total 1000 neural networks were sampled with 10 steps between each stored sample. When HMC was used, we ran with a fixed number of Leapfrog steps $L = 512$. When the NUTS sampler was used, we allowed for a maximum of $L = 4096$ Leapfrog steps (a maximum tree depth of $12$). \relax }}{56}{figure.caption.28}%
\contentsline {figure}{\numberline {8.7}{\ignorespaces The figure shows the standardized residuals computed on the test set. The model architechture used is a model with layers 5-20-20-1 with $\tanh (x)$ as the hidden activation function. In the top figure, we have used the HMC sampler with a fixed number of Leapfrog steps $L = 512$. In the bottom figure, we have used the NUTS sampler with a maximum tree depth of $12$ corresponding to a maximum of $L = 2^{12} = 4096$ Leapfrog steps. The remaining important hyperparameters were 2500 pretraining epochs with a batch size of 32 using the ADAM optimizer. In total 1000 neural networks were sampled in each case with a thinning-amount of 10 steps between each sample. The colors indicate how many warm-up steps that were used. The dotted line is the standard Normal distribution. \relax }}{57}{figure.caption.29}%
\contentsline {figure}{\numberline {8.8}{\ignorespaces The figure shows the average number of Leapfrog steps $L$ as a function of number of warm-up steps used by the NUTS sampler when sampling the models shown in the bottom of figure \ref {fig:standardized_residuals_vs_burn_in_steps}. We have included a few more measurements to showcase how fluctuating the average number can be. \relax }}{58}{figure.caption.30}%
\contentsline {figure}{\numberline {8.9}{\ignorespaces The figure shows the computed $R^2$-scores of a model with the architecture 5-20-20-1 with $\tanh (x)$ as the hidden activation function. In this case the varying number is the number of epochs run with pretraining starting from 32 all the way up to 8192. The batch size used was 32 with the ADAM optimizer. The number of warm-up steps was 1000 (200 of which were burn-in steps and 800 were adaptation steps). We fixed the Leapfrog steps to $L = 512$ using the HMC sampler. As usual we sampled 1000 neural networks with 10 steps between each sample. \relax }}{59}{figure.caption.31}%
\contentsline {figure}{\numberline {8.10}{\ignorespaces The figure shows the standardized residuals of a model with the architecture 5-20-20-1 with $\tanh (x)$ as the hidden activation function. In this case the varying number is the number of epochs run with pretraining starting from 32 all the way up to 8192. The batch size used was 32, the number of warm-up steps was 1000 (200 of which were burn-in steps and 800 were adaptation steps). We fixed the Leapfrog steps to $L = 512$ using the HMC sampler. The ADAM optimizer was used for the pretraining phase. As usual we sampled 1000 neural networks with 10 steps between each sample. The colors indicate the number of pretraining epochs performed. The dotted line is the standard Normal distribution. \relax }}{60}{figure.caption.32}%
\contentsline {figure}{\numberline {8.11}{\ignorespaces The figure shows the $R^2$-score computed on the training and test data as a function of number of nodes $n$ in the hidden layer of models with architechture 5-$n$-1, yielding a total of $5n + 1$ parameters. The hidden layer activation used was $\tanh (x)$. The models were trained with 1000 warm-up steps (20\% burn-in and 80\% adaptation), gathering 1000 neural networks with 10 steps between each sample. We used 2500 pretraining epochs with a batch size of 32. When using the HMC sampler, we fixed the number of Leapfrog steps to $L = 512$. When using NUTS, we set a maximum of $L = 4096$ Leapfrog steps. \relax }}{61}{figure.caption.33}%
\contentsline {figure}{\numberline {8.12}{\ignorespaces The figure shows the standardized residuals of models with an architecture 5-$n$-1 with $\tanh (x)$ as the hidden layer activation. The models were trained with 1000 warm-up steps (20\% burn-in and 80\% adaptation), drawing 1000 neural networks with 10 steps between each drawn sample. We used 2500 pretraining epochs with a batch size of 32 using the ADAM optimizer. The figure on top shows results of models trained with the HMC sampler where we fixed the number of Leapfrog steps to $L = 512$. The figure on the bottom shows the results of models trained with NUTS using a maximum of $L = 4096$ Leapfrog steps. The colors indicate the number of hidden layers nodes $n$ are used. The black dotted line shows the standard Normal distribution drawn in. \relax }}{62}{figure.caption.34}%
\contentsline {figure}{\numberline {8.13}{\ignorespaces The figure shows predictive distributions estimated by use of model 3 in table \ref {tab:deep_models} for two targets taken from the test set. The red line shows the true target and the black line shows the predicted sample mean obtained from the distribution. The figure on top demonstrates a case where the sample mean is approximately the same as the target, while the figure at the bottom demonstrates a case where the true target lies entirely outside the predictive distrbution. \relax }}{63}{figure.caption.35}%
\contentsline {figure}{\numberline {8.14}{\ignorespaces The figure shows the results of the predictive distributions estimated by use of model 3 in table \ref {tab:deep_models} computed on all datapoints in the training, validation and test data. The $y$-axis shows the percentage of all targets that lie on the interval $[\mu - k\sigma , \mu + k\sigma ]$ for $k=1,2,3,4,5$ where $\mu $ is the sample mean and $\sigma ^2$ is the sample variance of the predictive distribution. The crosses indicate evaluated points with training data shown in blue, validation data shown in orange and test data shown in green. The black dotted line shows the 68\% ($\pm \sigma $) expectation, the red dotted line shows the 95\% ($\pm 2\sigma $) expectation and the blue dotted line shows the 99.7\% ($\pm 3 \sigma $) expectation of a Gaussian distribution. \relax }}{64}{figure.caption.36}%
\addvspace {10\p@ }
